
TAREA_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e98  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800202c  0800202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002080  08002080  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002088  08002088  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800208c  0800208c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  0800209c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  0800209c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041ee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000107e  00000000  00000000  0002422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  000252a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00025708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014436  00000000  00000000  00025ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053d2  00000000  00000000  00039f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5d0  00000000  00000000  0003f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bd8a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f9c  00000000  00000000  000bd8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002014 	.word	0x08002014

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002014 	.word	0x08002014

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <busdata>:
 */

#include "LCD_LIB.h"
#include "main.h"

void busdata(char a){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, D4_Pin, a & 0x01);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	2120      	movs	r1, #32
 80004e2:	4812      	ldr	r0, [pc, #72]	; (800052c <busdata+0x60>)
 80004e4:	f001 f93c 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D5_Pin, a & 0x02);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	2110      	movs	r1, #16
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <busdata+0x60>)
 80004f6:	f001 f933 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, a & 0x04);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <busdata+0x60>)
 800050a:	f001 f929 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_Pin, a & 0x08);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <busdata+0x64>)
 800051e:	f001 f91f 	bl	8001760 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40020400 	.word	0x40020400
 8000530:	40020000 	.word	0x40020000

08000534 <comando>:

void comando(char a){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, EN_Pin,0);
 800053e:	2200      	movs	r2, #0
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <comando+0x40>)
 8000544:	f001 f90c 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, EN_Pin,1);
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <comando+0x40>)
 800054e:	f001 f907 	bl	8001760 <HAL_GPIO_WritePin>
	busdata(a);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffb9 	bl	80004cc <busdata>
	HAL_Delay(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fe5a 	bl	8001214 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, EN_Pin,0);
 8000560:	2200      	movs	r2, #0
 8000562:	2180      	movs	r1, #128	; 0x80
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <comando+0x40>)
 8000566:	f001 f8fb 	bl	8001760 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020800 	.word	0x40020800

08000578 <LCD_Init>:

void LCD_Init(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	comando(0x03);
 800057c:	2003      	movs	r0, #3
 800057e:	f7ff ffd9 	bl	8000534 <comando>
	comando(0x03);
 8000582:	2003      	movs	r0, #3
 8000584:	f7ff ffd6 	bl	8000534 <comando>
	comando(0x03);
 8000588:	2003      	movs	r0, #3
 800058a:	f7ff ffd3 	bl	8000534 <comando>
	comando(0x02);
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff ffd0 	bl	8000534 <comando>
	comando(0x02);
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff ffcd 	bl	8000534 <comando>
	comando(0x08);
 800059a:	2008      	movs	r0, #8
 800059c:	f7ff ffca 	bl	8000534 <comando>
	comando(0x00);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff ffc7 	bl	8000534 <comando>
	comando(0x08);
 80005a6:	2008      	movs	r0, #8
 80005a8:	f7ff ffc4 	bl	8000534 <comando>
	comando(0x00);
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ffc1 	bl	8000534 <comando>
	comando(0x01);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff ffbe 	bl	8000534 <comando>
	comando(0x00);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ffbb 	bl	8000534 <comando>
	comando(0x0E); //0x0C
 80005be:	200e      	movs	r0, #14
 80005c0:	f7ff ffb8 	bl	8000534 <comando>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LCD_SetCursor>:

void LCD_SetCursor(char x, char y){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]

	char m,n;		//m= nibble high, n=nibble low
	if(y==1){
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10e      	bne.n	80005fc <LCD_SetCursor+0x34>
		m=0x80 + x;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	3b80      	subs	r3, #128	; 0x80
 80005e2:	73fb      	strb	r3, [r7, #15]
		n=(0x80 + x)>>4;
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	3380      	adds	r3, #128	; 0x80
 80005e8:	111b      	asrs	r3, r3, #4
 80005ea:	73bb      	strb	r3, [r7, #14]
		comando(n);
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffa0 	bl	8000534 <comando>
		comando(m);
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff9c 	bl	8000534 <comando>
	}
	if(y==2){
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d10e      	bne.n	8000620 <LCD_SetCursor+0x58>
		m=0xC0+x;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3b40      	subs	r3, #64	; 0x40
 8000606:	73fb      	strb	r3, [r7, #15]
		n=(0xc0+ x)>>4;
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	33c0      	adds	r3, #192	; 0xc0
 800060c:	111b      	asrs	r3, r3, #4
 800060e:	73bb      	strb	r3, [r7, #14]
		comando(n);
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff8e 	bl	8000534 <comando>
		comando(m);
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff8a 	bl	8000534 <comando>
	}if(y==3){
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d10e      	bne.n	8000644 <LCD_SetCursor+0x7c>
		m=0x80 + 20 +x;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b6c      	subs	r3, #108	; 0x6c
 800062a:	73fb      	strb	r3, [r7, #15]
		n=(0x80 + 20 + x)>>4;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3394      	adds	r3, #148	; 0x94
 8000630:	111b      	asrs	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
		comando(n);
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff7c 	bl	8000534 <comando>
		comando(m);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff78 	bl	8000534 <comando>
	}if(y==4){
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d10e      	bne.n	8000668 <LCD_SetCursor+0xa0>
		m=0xC0 +20 +x;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3b2c      	subs	r3, #44	; 0x2c
 800064e:	73fb      	strb	r3, [r7, #15]
		n=(0xC0 + 20 +x)>>4;
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	33d4      	adds	r3, #212	; 0xd4
 8000654:	111b      	asrs	r3, r3, #4
 8000656:	73bb      	strb	r3, [r7, #14]
		comando(n);
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff6a 	bl	8000534 <comando>
		comando(m);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff66 	bl	8000534 <comando>
	}

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LCD_PrintCaracter>:

void LCD_PrintCaracter(char a){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	char m,n;
	m=a>>4;
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	73fb      	strb	r3, [r7, #15]
	n=a;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	73bb      	strb	r3, [r7, #14]
	//RS=1;
	HAL_GPIO_WritePin(GPIOA, RS_Pin,1);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <LCD_PrintCaracter+0x44>)
 800068c:	f001 f868 	bl	8001760 <HAL_GPIO_WritePin>
	comando(m);
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff4e 	bl	8000534 <comando>
	comando(n);
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff4a 	bl	8000534 <comando>
	HAL_GPIO_WritePin(GPIOA, RS_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <LCD_PrintCaracter+0x44>)
 80006a8:	f001 f85a 	bl	8001760 <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000

080006b8 <LCD_PrintString>:

void LCD_PrintString(char a[]){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	for(int k=0;a[k]!='\0';k++){
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e009      	b.n	80006da <LCD_PrintString+0x22>
		LCD_PrintCaracter(a[k]);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffce 	bl	8000670 <LCD_PrintCaracter>
	for(int k=0;a[k]!='\0';k++){
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1ef      	bne.n	80006c6 <LCD_PrintString+0xe>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <LCD_CreateCaracter>:

void LCD_CreateCaracter(char a,char b, char c, char d, char e, char f, char g,char h, char i){
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4603      	mov	r3, r0
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	460b      	mov	r3, r1
 8000708:	717b      	strb	r3, [r7, #5]
 800070a:	4613      	mov	r3, r2
 800070c:	713b      	strb	r3, [r7, #4]
	if(a==1){
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b01      	cmp	r3, #1
 8000712:	f040 8087 	bne.w	8000824 <LCD_CreateCaracter+0x134>
		comando(0x04);
 8000716:	2004      	movs	r0, #4
 8000718:	f7ff ff0c 	bl	8000534 <comando>
		comando(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff09 	bl	8000534 <comando>
		HAL_GPIO_WritePin(GPIOA, RS_Pin,1);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	4886      	ldr	r0, [pc, #536]	; (8000944 <LCD_CreateCaracter+0x254>)
 800072a:	f001 f819 	bl	8001760 <HAL_GPIO_WritePin>
		char m,n;
		m=b>>4;
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	73fb      	strb	r3, [r7, #15]
		n=b;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	73bb      	strb	r3, [r7, #14]
		comando(m);
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fefa 	bl	8000534 <comando>
		comando(n);
 8000740:	7bbb      	ldrb	r3, [r7, #14]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fef6 	bl	8000534 <comando>
		m=c>>4;
 8000748:	797b      	ldrb	r3, [r7, #5]
 800074a:	091b      	lsrs	r3, r3, #4
 800074c:	73fb      	strb	r3, [r7, #15]
		n=c;
 800074e:	797b      	ldrb	r3, [r7, #5]
 8000750:	73bb      	strb	r3, [r7, #14]
		comando(m);
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff feed 	bl	8000534 <comando>
		comando(n);
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fee9 	bl	8000534 <comando>
		m=d>>4;
 8000762:	793b      	ldrb	r3, [r7, #4]
 8000764:	091b      	lsrs	r3, r3, #4
 8000766:	73fb      	strb	r3, [r7, #15]
		n=d;
 8000768:	793b      	ldrb	r3, [r7, #4]
 800076a:	73bb      	strb	r3, [r7, #14]
		comando(m);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fee0 	bl	8000534 <comando>
		comando(n);
 8000774:	7bbb      	ldrb	r3, [r7, #14]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fedc 	bl	8000534 <comando>
		m=e>>4;
 800077c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	73fb      	strb	r3, [r7, #15]
		n=e;
 8000784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000788:	73bb      	strb	r3, [r7, #14]
		comando(m);
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fed1 	bl	8000534 <comando>
		comando(n);
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fecd 	bl	8000534 <comando>
		m=f>>4;
 800079a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800079e:	091b      	lsrs	r3, r3, #4
 80007a0:	73fb      	strb	r3, [r7, #15]
		n=f;
 80007a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007a6:	73bb      	strb	r3, [r7, #14]
		comando(m);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fec2 	bl	8000534 <comando>
		comando(n);
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff febe 	bl	8000534 <comando>
		m=g>>4;
 80007b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007bc:	091b      	lsrs	r3, r3, #4
 80007be:	73fb      	strb	r3, [r7, #15]
		n=g;
 80007c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007c4:	73bb      	strb	r3, [r7, #14]
		comando(m);
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff feb3 	bl	8000534 <comando>
		comando(n);
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feaf 	bl	8000534 <comando>
		m=h>>4;
 80007d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007da:	091b      	lsrs	r3, r3, #4
 80007dc:	73fb      	strb	r3, [r7, #15]
		n=h;
 80007de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e2:	73bb      	strb	r3, [r7, #14]
		comando(m);
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fea4 	bl	8000534 <comando>
		comando(n);
 80007ec:	7bbb      	ldrb	r3, [r7, #14]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fea0 	bl	8000534 <comando>
		m=i>>4;
 80007f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80007f8:	091b      	lsrs	r3, r3, #4
 80007fa:	73fb      	strb	r3, [r7, #15]
		n=i;
 80007fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000800:	73bb      	strb	r3, [r7, #14]
		comando(m);
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe95 	bl	8000534 <comando>
		comando(n);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe91 	bl	8000534 <comando>
		HAL_GPIO_WritePin(GPIOA, RS_Pin,0);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	484a      	ldr	r0, [pc, #296]	; (8000944 <LCD_CreateCaracter+0x254>)
 800081a:	f000 ffa1 	bl	8001760 <HAL_GPIO_WritePin>
		//comando(0x00);
		//comando(0x01);
		HAL_Delay(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f000 fcf8 	bl	8001214 <HAL_Delay>
	}if(a==2){
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b02      	cmp	r3, #2
 8000828:	f040 8087 	bne.w	800093a <LCD_CreateCaracter+0x24a>
		comando(0x04);
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff fe81 	bl	8000534 <comando>
		comando(0x08);
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff fe7e 	bl	8000534 <comando>
		HAL_GPIO_WritePin(GPIOA, RS_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	4841      	ldr	r0, [pc, #260]	; (8000944 <LCD_CreateCaracter+0x254>)
 8000840:	f000 ff8e 	bl	8001760 <HAL_GPIO_WritePin>
		char m,n;
		m=b>>4;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	737b      	strb	r3, [r7, #13]
		n=b;
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	733b      	strb	r3, [r7, #12]
		comando(m);
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe6f 	bl	8000534 <comando>
		comando(n);
 8000856:	7b3b      	ldrb	r3, [r7, #12]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe6b 	bl	8000534 <comando>
		m=c>>4;
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	737b      	strb	r3, [r7, #13]
		n=c;
 8000864:	797b      	ldrb	r3, [r7, #5]
 8000866:	733b      	strb	r3, [r7, #12]
		comando(m);
 8000868:	7b7b      	ldrb	r3, [r7, #13]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe62 	bl	8000534 <comando>
		comando(n);
 8000870:	7b3b      	ldrb	r3, [r7, #12]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe5e 	bl	8000534 <comando>
		m=d>>4;
 8000878:	793b      	ldrb	r3, [r7, #4]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	737b      	strb	r3, [r7, #13]
		n=d;
 800087e:	793b      	ldrb	r3, [r7, #4]
 8000880:	733b      	strb	r3, [r7, #12]
		comando(m);
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe55 	bl	8000534 <comando>
		comando(n);
 800088a:	7b3b      	ldrb	r3, [r7, #12]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe51 	bl	8000534 <comando>
		m=e>>4;
 8000892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	737b      	strb	r3, [r7, #13]
		n=e;
 800089a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800089e:	733b      	strb	r3, [r7, #12]
		comando(m);
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe46 	bl	8000534 <comando>
		comando(n);
 80008a8:	7b3b      	ldrb	r3, [r7, #12]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe42 	bl	8000534 <comando>
		m=f>>4;
 80008b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	737b      	strb	r3, [r7, #13]
		n=f;
 80008b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008bc:	733b      	strb	r3, [r7, #12]
		comando(m);
 80008be:	7b7b      	ldrb	r3, [r7, #13]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe37 	bl	8000534 <comando>
		comando(n);
 80008c6:	7b3b      	ldrb	r3, [r7, #12]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe33 	bl	8000534 <comando>
		m=g>>4;
 80008ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	737b      	strb	r3, [r7, #13]
		n=g;
 80008d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008da:	733b      	strb	r3, [r7, #12]
		comando(m);
 80008dc:	7b7b      	ldrb	r3, [r7, #13]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe28 	bl	8000534 <comando>
		comando(n);
 80008e4:	7b3b      	ldrb	r3, [r7, #12]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe24 	bl	8000534 <comando>
		m=h>>4;
 80008ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	737b      	strb	r3, [r7, #13]
		n=h;
 80008f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f8:	733b      	strb	r3, [r7, #12]
		comando(m);
 80008fa:	7b7b      	ldrb	r3, [r7, #13]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe19 	bl	8000534 <comando>
		comando(n);
 8000902:	7b3b      	ldrb	r3, [r7, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe15 	bl	8000534 <comando>
		m=i>>4;
 800090a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	737b      	strb	r3, [r7, #13]
		n=i;
 8000912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000916:	733b      	strb	r3, [r7, #12]
		comando(m);
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe0a 	bl	8000534 <comando>
		comando(n);
 8000920:	7b3b      	ldrb	r3, [r7, #12]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe06 	bl	8000534 <comando>
		HAL_GPIO_WritePin(GPIOA, RS_Pin, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <LCD_CreateCaracter+0x254>)
 8000930:	f000 ff16 	bl	8001760 <HAL_GPIO_WritePin>
		//comando(0x00);
		//comando(0x01);
		HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 fc6d 	bl	8001214 <HAL_Delay>
	}



}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	40020000 	.word	0x40020000

08000948 <LCD_WriteCaracter>:

void LCD_WriteCaracter(char a){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_WritePin(GPIOA, RS_Pin, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <LCD_WriteCaracter+0x3c>)
 800095a:	f000 ff01 	bl	8001760 <HAL_GPIO_WritePin>
		comando(0x00);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fde8 	bl	8000534 <comando>
		comando(a-1);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	3b01      	subs	r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fde2 	bl	8000534 <comando>
		HAL_GPIO_WritePin(GPIOA, RS_Pin, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <LCD_WriteCaracter+0x3c>)
 8000978:	f000 fef2 	bl	8001760 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40020000 	.word	0x40020000

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fbcf 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f84d 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 f8ab 	bl	8000af0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 800099a:	f7ff fded 	bl	8000578 <LCD_Init>

  LCD_CreateCaracter(1,0x10,0x08,0x04,0x07,0x04,0x08,0x10,0x00);
 800099e:	2300      	movs	r3, #0
 80009a0:	9304      	str	r3, [sp, #16]
 80009a2:	2310      	movs	r3, #16
 80009a4:	9303      	str	r3, [sp, #12]
 80009a6:	2308      	movs	r3, #8
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	2304      	movs	r3, #4
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2307      	movs	r3, #7
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2304      	movs	r3, #4
 80009b4:	2208      	movs	r2, #8
 80009b6:	2110      	movs	r1, #16
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fe99 	bl	80006f0 <LCD_CreateCaracter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(menu1==0){
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <main+0x94>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d120      	bne.n	8000a08 <main+0x80>
		  Menu1();
 80009c6:	f000 f9b7 	bl	8000d38 <Menu1>
		  Pulsadores();
 80009ca:	f000 f91b 	bl	8000c04 <Pulsadores>

		if(aux2==0 && aux3==1){
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <main+0x98>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d118      	bne.n	8000a08 <main+0x80>
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <main+0x9c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d114      	bne.n	8000a08 <main+0x80>
			comando(0x00);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fda8 	bl	8000534 <comando>
			comando(0x01);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fda5 	bl	8000534 <comando>
			menu1=1;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <main+0x94>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
			aux1=0;aux2=0;aux3=0;aux4=0;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <main+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <main+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <main+0x9c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <main+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
		}

	  }
	  if(menu1==1){
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <main+0x94>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1d6      	bne.n	80009be <main+0x36>
		  Menu2();
 8000a10:	f000 fa0a 	bl	8000e28 <Menu2>
		  Pulsadores();
 8000a14:	f000 f8f6 	bl	8000c04 <Pulsadores>
	  if(menu1==0){
 8000a18:	e7d1      	b.n	80009be <main+0x36>
 8000a1a:	bf00      	nop
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	2000002a 	.word	0x2000002a
 8000a24:	2000002b 	.word	0x2000002b
 8000a28:	20000029 	.word	0x20000029
 8000a2c:	2000002c 	.word	0x2000002c

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	; 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	; 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fae0 	bl	8002004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <SystemClock_Config+0xb8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <SystemClock_Config+0xb8>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <SystemClock_Config+0xb8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <SystemClock_Config+0xbc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <SystemClock_Config+0xbc>)
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <SystemClock_Config+0xbc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 fe75 	bl	8001794 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ab0:	f000 faaa 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f8d8 	bl	8001c84 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ada:	f000 fa95 	bl	8001008 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	; 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b3a      	ldr	r3, [pc, #232]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a39      	ldr	r2, [pc, #228]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a2b      	ldr	r2, [pc, #172]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <MX_GPIO_Init+0x104>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_GPIO_Init+0x108>)
 8000b62:	f000 fdfd 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	4824      	ldr	r0, [pc, #144]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000b6c:	f000 fdf8 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|RS_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b76:	4822      	ldr	r0, [pc, #136]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b78:	f000 fdf2 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGTH_Pin LEFT_Pin UP_Pin DOWN_Pin */
  GPIO_InitStruct.Pin = RIGTH_Pin|LEFT_Pin|UP_Pin|DOWN_Pin;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481c      	ldr	r0, [pc, #112]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b90:	f000 fc4a 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000b94:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_GPIO_Init+0x108>)
 8000bae:	f000 fc3b 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0x10c>)
 8000bca:	f000 fc2d 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000be8:	f000 fc1e 	bl	8001428 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40020800 	.word	0x40020800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Pulsadores>:

/* USER CODE BEGIN 4 */
void Pulsadores(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, DOWN_Pin)==0){
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4847      	ldr	r0, [pc, #284]	; (8000d28 <Pulsadores+0x124>)
 8000c0c:	f000 fd90 	bl	8001730 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d127      	bne.n	8000c66 <Pulsadores+0x62>
		  while(HAL_GPIO_ReadPin(GPIOA, DOWN_Pin)==0);
 8000c16:	bf00      	nop
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4843      	ldr	r0, [pc, #268]	; (8000d28 <Pulsadores+0x124>)
 8000c1c:	f000 fd88 	bl	8001730 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f8      	beq.n	8000c18 <Pulsadores+0x14>
		  HAL_Delay(20);
 8000c26:	2014      	movs	r0, #20
 8000c28:	f000 faf4 	bl	8001214 <HAL_Delay>
		  aux2++;
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <Pulsadores+0x128>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <Pulsadores+0x128>)
 8000c36:	701a      	strb	r2, [r3, #0]
		  if(menu1==0){
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <Pulsadores+0x12c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d107      	bne.n	8000c50 <Pulsadores+0x4c>
			  if(aux2>2) {aux2=0;}
 8000c40:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <Pulsadores+0x128>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d90e      	bls.n	8000c66 <Pulsadores+0x62>
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <Pulsadores+0x128>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00a      	b.n	8000c66 <Pulsadores+0x62>
		  }else if(menu1==1){
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <Pulsadores+0x12c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d106      	bne.n	8000c66 <Pulsadores+0x62>
			  if(aux2>3) {aux2=0;}
 8000c58:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <Pulsadores+0x128>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d902      	bls.n	8000c66 <Pulsadores+0x62>
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <Pulsadores+0x128>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, UP_Pin)==0){
 8000c66:	2104      	movs	r1, #4
 8000c68:	482f      	ldr	r0, [pc, #188]	; (8000d28 <Pulsadores+0x124>)
 8000c6a:	f000 fd61 	bl	8001730 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d110      	bne.n	8000c96 <Pulsadores+0x92>
		  while(HAL_GPIO_ReadPin(GPIOA, UP_Pin)==0);
 8000c74:	bf00      	nop
 8000c76:	2104      	movs	r1, #4
 8000c78:	482b      	ldr	r0, [pc, #172]	; (8000d28 <Pulsadores+0x124>)
 8000c7a:	f000 fd59 	bl	8001730 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f8      	beq.n	8000c76 <Pulsadores+0x72>
		  HAL_Delay(20);
 8000c84:	2014      	movs	r0, #20
 8000c86:	f000 fac5 	bl	8001214 <HAL_Delay>
		  aux2--;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <Pulsadores+0x128>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <Pulsadores+0x128>)
 8000c94:	701a      	strb	r2, [r3, #0]
		  }
		  }else if(menu1==1){
					  if(aux2<0) {aux2=1;}

		  }
	  if(HAL_GPIO_ReadPin(GPIOA, RIGTH_Pin)==0){
 8000c96:	2101      	movs	r1, #1
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <Pulsadores+0x124>)
 8000c9a:	f000 fd49 	bl	8001730 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d13e      	bne.n	8000d22 <Pulsadores+0x11e>
		  while(HAL_GPIO_ReadPin(GPIOA, RIGTH_Pin)==0);
 8000ca4:	bf00      	nop
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	481f      	ldr	r0, [pc, #124]	; (8000d28 <Pulsadores+0x124>)
 8000caa:	f000 fd41 	bl	8001730 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f8      	beq.n	8000ca6 <Pulsadores+0xa2>
		  HAL_Delay(20);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f000 faad 	bl	8001214 <HAL_Delay>
		  aux3++;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <Pulsadores+0x130>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <Pulsadores+0x130>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		  if(menu1==0){
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <Pulsadores+0x12c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <Pulsadores+0xd8>
			  if(aux3>1)aux3=1;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <Pulsadores+0x130>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d902      	bls.n	8000cdc <Pulsadores+0xd8>
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <Pulsadores+0x130>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
		  }
		  if(menu1==1){
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <Pulsadores+0x12c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d106      	bne.n	8000cf2 <Pulsadores+0xee>
			  if(aux3>2)aux3=2;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <Pulsadores+0x130>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d902      	bls.n	8000cf2 <Pulsadores+0xee>
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <Pulsadores+0x130>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	701a      	strb	r2, [r3, #0]
		  }
	  if(HAL_GPIO_ReadPin(GPIOA, LEFT_Pin)==0){
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <Pulsadores+0x124>)
 8000cf6:	f000 fd1b 	bl	8001730 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d110      	bne.n	8000d22 <Pulsadores+0x11e>
		  while(HAL_GPIO_ReadPin(GPIOA, LEFT_Pin)==0);
 8000d00:	bf00      	nop
 8000d02:	2102      	movs	r1, #2
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <Pulsadores+0x124>)
 8000d06:	f000 fd13 	bl	8001730 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f8      	beq.n	8000d02 <Pulsadores+0xfe>
		  HAL_Delay(20);
 8000d10:	2014      	movs	r0, #20
 8000d12:	f000 fa7f 	bl	8001214 <HAL_Delay>
		  aux3--;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <Pulsadores+0x130>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <Pulsadores+0x130>)
 8000d20:	701a      	strb	r2, [r3, #0]

		  }

	  }
}
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	2000002a 	.word	0x2000002a
 8000d30:	20000028 	.word	0x20000028
 8000d34:	2000002b 	.word	0x2000002b

08000d38 <Menu1>:

void Menu1(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	LCD_SetCursor(1,1);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fc42 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Menu");
 8000d44:	4833      	ldr	r0, [pc, #204]	; (8000e14 <Menu1+0xdc>)
 8000d46:	f7ff fcb7 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(2,2);
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f7ff fc3b 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Glucosa");
 8000d52:	4831      	ldr	r0, [pc, #196]	; (8000e18 <Menu1+0xe0>)
 8000d54:	f7ff fcb0 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(2,3);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f7ff fc34 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Dosis");
 8000d60:	482e      	ldr	r0, [pc, #184]	; (8000e1c <Menu1+0xe4>)
 8000d62:	f7ff fca9 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(2,4);
 8000d66:	2104      	movs	r1, #4
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fc2d 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Historial");
 8000d6e:	482c      	ldr	r0, [pc, #176]	; (8000e20 <Menu1+0xe8>)
 8000d70:	f7ff fca2 	bl	80006b8 <LCD_PrintString>
	if(aux2==0){
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <Menu1+0xec>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d115      	bne.n	8000da8 <Menu1+0x70>
		LCD_SetCursor(1,3);
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fc22 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000d84:	2020      	movs	r0, #32
 8000d86:	f7ff fc73 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,4);
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fc1b 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000d92:	2020      	movs	r0, #32
 8000d94:	f7ff fc6c 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,2);
 8000d98:	2102      	movs	r1, #2
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f7ff fc14 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fdd1 	bl	8000948 <LCD_WriteCaracter>
		LCD_SetCursor(1,3);
		LCD_PrintCaracter(' ');
		LCD_SetCursor(1,4);
		LCD_WriteCaracter(1);
	 }
}
 8000da6:	e032      	b.n	8000e0e <Menu1+0xd6>
	}else if(aux2==1){
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <Menu1+0xec>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d115      	bne.n	8000ddc <Menu1+0xa4>
		LCD_SetCursor(1,2);
 8000db0:	2102      	movs	r1, #2
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fc08 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000db8:	2020      	movs	r0, #32
 8000dba:	f7ff fc59 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,4);
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fc01 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	f7ff fc52 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,3);
 8000dcc:	2103      	movs	r1, #3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fbfa 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f7ff fdb7 	bl	8000948 <LCD_WriteCaracter>
}
 8000dda:	e018      	b.n	8000e0e <Menu1+0xd6>
	}else if(aux2==2){
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <Menu1+0xec>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d114      	bne.n	8000e0e <Menu1+0xd6>
		LCD_SetCursor(1,2);
 8000de4:	2102      	movs	r1, #2
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fbee 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000dec:	2020      	movs	r0, #32
 8000dee:	f7ff fc3f 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,3);
 8000df2:	2103      	movs	r1, #3
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fbe7 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000dfa:	2020      	movs	r0, #32
 8000dfc:	f7ff fc38 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,4);
 8000e00:	2104      	movs	r1, #4
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fbe0 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fd9d 	bl	8000948 <LCD_WriteCaracter>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	0800202c 	.word	0x0800202c
 8000e18:	08002034 	.word	0x08002034
 8000e1c:	0800203c 	.word	0x0800203c
 8000e20:	08002044 	.word	0x08002044
 8000e24:	2000002a 	.word	0x2000002a

08000e28 <Menu2>:

void Menu2 (void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af06      	add	r7, sp, #24
	LCD_CreateCaracter(2,   0B00011111,0B00010001,0B00010001,0B00010001, 0B00010001,0B00010001,0B00011111,0B00000000);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9304      	str	r3, [sp, #16]
 8000e32:	231f      	movs	r3, #31
 8000e34:	9303      	str	r3, [sp, #12]
 8000e36:	2311      	movs	r3, #17
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	2311      	movs	r3, #17
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	2311      	movs	r3, #17
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2311      	movs	r3, #17
 8000e44:	2211      	movs	r2, #17
 8000e46:	211f      	movs	r1, #31
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fc51 	bl	80006f0 <LCD_CreateCaracter>
	LCD_CreateCaracter(3,   0B11111111,0B11111111,0B11111111,0B11111111,0B11111111,0B11111111,0B11111111, 0B11111111);
 8000e4e:	23ff      	movs	r3, #255	; 0xff
 8000e50:	9304      	str	r3, [sp, #16]
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	9303      	str	r3, [sp, #12]
 8000e56:	23ff      	movs	r3, #255	; 0xff
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	23ff      	movs	r3, #255	; 0xff
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	23ff      	movs	r3, #255	; 0xff
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f7ff fc41 	bl	80006f0 <LCD_CreateCaracter>

	if(aux2==0 && aux3==0){
 8000e6e:	4b60      	ldr	r3, [pc, #384]	; (8000ff0 <Menu2+0x1c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d14a      	bne.n	8000f0c <Menu2+0xe4>
 8000e76:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <Menu2+0x1cc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d146      	bne.n	8000f0c <Menu2+0xe4>
	LCD_SetCursor(1,1);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fba1 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Glucosa");
 8000e86:	485c      	ldr	r0, [pc, #368]	; (8000ff8 <Menu2+0x1d0>)
 8000e88:	f7ff fc16 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(2,2);
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fb9a 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Actual : ");
 8000e94:	4859      	ldr	r0, [pc, #356]	; (8000ffc <Menu2+0x1d4>)
 8000e96:	f7ff fc0f 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(2,3);
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fb93 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("Confirmar?");
 8000ea2:	4857      	ldr	r0, [pc, #348]	; (8001000 <Menu2+0x1d8>)
 8000ea4:	f7ff fc08 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(9,4);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	2009      	movs	r0, #9
 8000eac:	f7ff fb8c 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintString("NO   SI");
 8000eb0:	4854      	ldr	r0, [pc, #336]	; (8001004 <Menu2+0x1dc>)
 8000eb2:	f7ff fc01 	bl	80006b8 <LCD_PrintString>
	LCD_SetCursor(8,4);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	2008      	movs	r0, #8
 8000eba:	f7ff fb85 	bl	80005c8 <LCD_SetCursor>
	LCD_WriteCaracter(3);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff fd42 	bl	8000948 <LCD_WriteCaracter>
	LCD_SetCursor(13,4);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	200d      	movs	r0, #13
 8000ec8:	f7ff fb7e 	bl	80005c8 <LCD_SetCursor>
	LCD_WriteCaracter(3);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f7ff fd3b 	bl	8000948 <LCD_WriteCaracter>

	LCD_SetCursor(1,3);
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff fb77 	bl	80005c8 <LCD_SetCursor>
	LCD_PrintCaracter(' ');
 8000eda:	2020      	movs	r0, #32
 8000edc:	f7ff fbc8 	bl	8000670 <LCD_PrintCaracter>
	LCD_SetCursor(1,2);
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f7ff fb70 	bl	80005c8 <LCD_SetCursor>
	LCD_WriteCaracter(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fd2d 	bl	8000948 <LCD_WriteCaracter>
	LCD_SetCursor(8,4);
 8000eee:	2104      	movs	r1, #4
 8000ef0:	2008      	movs	r0, #8
 8000ef2:	f7ff fb69 	bl	80005c8 <LCD_SetCursor>
	LCD_WriteCaracter(2);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff fd26 	bl	8000948 <LCD_WriteCaracter>
	LCD_SetCursor(13,4);
 8000efc:	2104      	movs	r1, #4
 8000efe:	200d      	movs	r0, #13
 8000f00:	f7ff fb62 	bl	80005c8 <LCD_SetCursor>
	LCD_WriteCaracter(2);
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fd1f 	bl	8000948 <LCD_WriteCaracter>
 8000f0a:	e06e      	b.n	8000fea <Menu2+0x1c2>

	}else if(aux2==1 && aux3==0){
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <Menu2+0x1c8>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d120      	bne.n	8000f56 <Menu2+0x12e>
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <Menu2+0x1cc>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d11c      	bne.n	8000f56 <Menu2+0x12e>
		LCD_SetCursor(1,2);
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fb52 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000f24:	2020      	movs	r0, #32
 8000f26:	f7ff fba3 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,3);
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fb4b 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fd08 	bl	8000948 <LCD_WriteCaracter>
		LCD_SetCursor(8,4);
 8000f38:	2104      	movs	r1, #4
 8000f3a:	2008      	movs	r0, #8
 8000f3c:	f7ff fb44 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(2);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fd01 	bl	8000948 <LCD_WriteCaracter>
		LCD_SetCursor(13,4);
 8000f46:	2104      	movs	r1, #4
 8000f48:	200d      	movs	r0, #13
 8000f4a:	f7ff fb3d 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(2);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff fcfa 	bl	8000948 <LCD_WriteCaracter>
 8000f54:	e049      	b.n	8000fea <Menu2+0x1c2>
	}else if(aux2==1 && aux3==1){
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <Menu2+0x1c8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d120      	bne.n	8000fa0 <Menu2+0x178>
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <Menu2+0x1cc>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d11c      	bne.n	8000fa0 <Menu2+0x178>
		LCD_SetCursor(1,2);
 8000f66:	2102      	movs	r1, #2
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff fb2d 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000f6e:	2020      	movs	r0, #32
 8000f70:	f7ff fb7e 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,3);
 8000f74:	2103      	movs	r1, #3
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fb26 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f7ff fb77 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(8,4);
 8000f82:	2104      	movs	r1, #4
 8000f84:	2008      	movs	r0, #8
 8000f86:	f7ff fb1f 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff fcdc 	bl	8000948 <LCD_WriteCaracter>
		LCD_SetCursor(13,4);
 8000f90:	2104      	movs	r1, #4
 8000f92:	200d      	movs	r0, #13
 8000f94:	f7ff fb18 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(2);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fcd5 	bl	8000948 <LCD_WriteCaracter>
 8000f9e:	e024      	b.n	8000fea <Menu2+0x1c2>
	 }
	else if(aux2==1 && aux3==2){
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <Menu2+0x1c8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d120      	bne.n	8000fea <Menu2+0x1c2>
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <Menu2+0x1cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d11c      	bne.n	8000fea <Menu2+0x1c2>
		LCD_SetCursor(1,2);
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fb08 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000fb8:	2020      	movs	r0, #32
 8000fba:	f7ff fb59 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(1,3);
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fb01 	bl	80005c8 <LCD_SetCursor>
		LCD_PrintCaracter(' ');
 8000fc6:	2020      	movs	r0, #32
 8000fc8:	f7ff fb52 	bl	8000670 <LCD_PrintCaracter>
		LCD_SetCursor(8,4);
 8000fcc:	2104      	movs	r1, #4
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f7ff fafa 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(2);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f7ff fcb7 	bl	8000948 <LCD_WriteCaracter>
		LCD_SetCursor(13,4);
 8000fda:	2104      	movs	r1, #4
 8000fdc:	200d      	movs	r0, #13
 8000fde:	f7ff faf3 	bl	80005c8 <LCD_SetCursor>
		LCD_WriteCaracter(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fcb0 	bl	8000948 <LCD_WriteCaracter>
	 }
}
 8000fe8:	e7ff      	b.n	8000fea <Menu2+0x1c2>
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000002a 	.word	0x2000002a
 8000ff4:	2000002b 	.word	0x2000002b
 8000ff8:	08002034 	.word	0x08002034
 8000ffc:	08002050 	.word	0x08002050
 8001000:	0800205c 	.word	0x0800205c
 8001004:	08002068 	.word	0x08002068

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f890 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e2:	490e      	ldr	r1, [pc, #56]	; (800111c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f8:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd7 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f000 ff57 	bl	8001fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fc3b 	bl	8000988 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001120:	08002090 	.word	0x08002090
  ldr r2, =_sbss
 8001124:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001128:	20000034 	.word	0x20000034

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f931 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff ff56 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f93b 	bl	800140e <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f911 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000030 	.word	0x20000030

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000030 	.word	0x20000030

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff47 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5c 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e159      	b.n	80016f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001444:	2201      	movs	r2, #1
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8148 	bne.w	80016f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d005      	beq.n	800147a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001476:	2b02      	cmp	r3, #2
 8001478:	d130      	bne.n	80014dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b0:	2201      	movs	r2, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 0201 	and.w	r2, r3, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d017      	beq.n	8001518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d123      	bne.n	800156c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	08da      	lsrs	r2, r3, #3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3208      	adds	r2, #8
 8001566:	69b9      	ldr	r1, [r7, #24]
 8001568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a2 	beq.w	80016f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b57      	ldr	r3, [pc, #348]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	4a56      	ldr	r2, [pc, #344]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6453      	str	r3, [r2, #68]	; 0x44
 80015be:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_GPIO_Init+0x2ec>)
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_GPIO_Init+0x2f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x202>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a48      	ldr	r2, [pc, #288]	; (800171c <HAL_GPIO_Init+0x2f4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x1fe>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a47      	ldr	r2, [pc, #284]	; (8001720 <HAL_GPIO_Init+0x2f8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x1fa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_GPIO_Init+0x2fc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x1f6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x300>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x1f2>
 8001616:	2304      	movs	r3, #4
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161a:	2307      	movs	r3, #7
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x204>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x204>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x204>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_GPIO_Init+0x2ec>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_GPIO_Init+0x304>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166e:	4a2f      	ldr	r2, [pc, #188]	; (800172c <HAL_GPIO_Init+0x304>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_GPIO_Init+0x304>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001698:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_GPIO_Init+0x304>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_GPIO_Init+0x304>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_GPIO_Init+0x304>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_GPIO_Init+0x304>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_GPIO_Init+0x304>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f aea2 	bls.w	8001444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	887b      	ldrh	r3, [r7, #2]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e001      	b.n	8001752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e264      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d075      	beq.n	800189e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b2:	4ba3      	ldr	r3, [pc, #652]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4ba0      	ldr	r3, [pc, #640]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b9d      	ldr	r3, [pc, #628]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b99      	ldr	r3, [pc, #612]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e23f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x74>
 80017fa:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a87      	ldr	r2, [pc, #540]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 800182c:	4b84      	ldr	r3, [pc, #528]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a83      	ldr	r2, [pc, #524]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a80      	ldr	r2, [pc, #512]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fcd6 	bl	80011fc <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fcd2 	bl	80011fc <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e204      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xc0>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fcc2 	bl	80011fc <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fcbe 	bl	80011fc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1f0      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0xe8>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1c4      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4952      	ldr	r1, [pc, #328]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_RCC_OscConfig+0x2b0>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fc77 	bl	80011fc <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fc73 	bl	80011fc <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1a5      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4940      	ldr	r1, [pc, #256]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_RCC_OscConfig+0x2b0>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fc56 	bl	80011fc <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fc52 	bl	80011fc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e184      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d030      	beq.n	80019e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_OscConfig+0x2b4>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fc36 	bl	80011fc <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fc32 	bl	80011fc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e164      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x200>
 80019b2:	e015      	b.n	80019e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x2b4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fc1f 	bl	80011fc <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fc1b 	bl	80011fc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e14d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a0 	beq.w	8001b2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x2b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d121      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_RCC_OscConfig+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_RCC_OscConfig+0x2b8>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fbe1 	bl	80011fc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e011      	b.n	8001a62 <HAL_RCC_OscConfig+0x2ce>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470000 	.word	0x42470000
 8001a48:	42470e80 	.word	0x42470e80
 8001a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff fbd4 	bl	80011fc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e106      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b85      	ldr	r3, [pc, #532]	; (8001c78 <HAL_RCC_OscConfig+0x4e4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
 8001a76:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a80      	ldr	r2, [pc, #512]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x32a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x312>
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a90:	4a7a      	ldr	r2, [pc, #488]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6713      	str	r3, [r2, #112]	; 0x70
 8001a98:	4b78      	ldr	r3, [pc, #480]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x32a>
 8001aa6:	4b75      	ldr	r3, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a74      	ldr	r2, [pc, #464]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	4b72      	ldr	r3, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a71      	ldr	r2, [pc, #452]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fb99 	bl	80011fc <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fb95 	bl	80011fc <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0c5      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCC_OscConfig+0x33a>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fb83 	bl	80011fc <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff fb7f 	bl	80011fc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0af      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 809b 	beq.w	8001c6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d05c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d141      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fb53 	bl	80011fc <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff fb4f 	bl	80011fc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e081      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6c:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	019b      	lsls	r3, r3, #6
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb28 	bl	80011fc <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fb24 	bl	80011fc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e056      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
 8001bce:	e04e      	b.n	8001c6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb11 	bl	80011fc <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb0d 	bl	80011fc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e03f      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x44a>
 8001bfc:	e037      	b.n	8001c6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e032      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_RCC_OscConfig+0x4e8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d028      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d121      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d11a      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d111      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	3b01      	subs	r3, #1
 8001c54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470060 	.word	0x42470060

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cc      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d90c      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e067      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7ff fa42 	bl	80011fc <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7ff fa3e 	bl	80011fc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20c      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f9a2 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08002070 	.word	0x08002070
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e56:	2100      	movs	r1, #0
 8001e58:	6079      	str	r1, [r7, #4]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	60f9      	str	r1, [r7, #12]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e62:	2100      	movs	r1, #0
 8001e64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4952      	ldr	r1, [pc, #328]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e68:	6889      	ldr	r1, [r1, #8]
 8001e6a:	f001 010c 	and.w	r1, r1, #12
 8001e6e:	2908      	cmp	r1, #8
 8001e70:	d00d      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x3e>
 8001e72:	2908      	cmp	r1, #8
 8001e74:	f200 8094 	bhi.w	8001fa0 <HAL_RCC_GetSysClockFreq+0x150>
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x32>
 8001e7c:	2904      	cmp	r1, #4
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x38>
 8001e80:	e08e      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e84:	60bb      	str	r3, [r7, #8]
       break;
 8001e86:	e08e      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e8a:	60bb      	str	r3, [r7, #8]
      break;
 8001e8c:	e08b      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e8e:	4948      	ldr	r1, [pc, #288]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e90:	6849      	ldr	r1, [r1, #4]
 8001e92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001e96:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e98:	4945      	ldr	r1, [pc, #276]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9a:	6849      	ldr	r1, [r1, #4]
 8001e9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d024      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea4:	4942      	ldr	r1, [pc, #264]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea6:	6849      	ldr	r1, [r1, #4]
 8001ea8:	0989      	lsrs	r1, r1, #6
 8001eaa:	4608      	mov	r0, r1
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001eb4:	f04f 0500 	mov.w	r5, #0
 8001eb8:	ea00 0204 	and.w	r2, r0, r4
 8001ebc:	ea01 0305 	and.w	r3, r1, r5
 8001ec0:	493d      	ldr	r1, [pc, #244]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ec2:	fb01 f003 	mul.w	r0, r1, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	fb01 f102 	mul.w	r1, r1, r2
 8001ecc:	1844      	adds	r4, r0, r1
 8001ece:	493a      	ldr	r1, [pc, #232]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ed0:	fba2 0101 	umull	r0, r1, r2, r1
 8001ed4:	1863      	adds	r3, r4, r1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	f7fe f978 	bl	80001d4 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e04a      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	099b      	lsrs	r3, r3, #6
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001efe:	f04f 0100 	mov.w	r1, #0
 8001f02:	ea02 0400 	and.w	r4, r2, r0
 8001f06:	ea03 0501 	and.w	r5, r3, r1
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	014b      	lsls	r3, r1, #5
 8001f18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f1c:	0142      	lsls	r2, r0, #5
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	1b00      	subs	r0, r0, r4
 8001f24:	eb61 0105 	sbc.w	r1, r1, r5
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	018b      	lsls	r3, r1, #6
 8001f32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f36:	0182      	lsls	r2, r0, #6
 8001f38:	1a12      	subs	r2, r2, r0
 8001f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	00d9      	lsls	r1, r3, #3
 8001f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f4c:	00d0      	lsls	r0, r2, #3
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	1912      	adds	r2, r2, r4
 8001f54:	eb45 0303 	adc.w	r3, r5, r3
 8001f58:	f04f 0000 	mov.w	r0, #0
 8001f5c:	f04f 0100 	mov.w	r1, #0
 8001f60:	0299      	lsls	r1, r3, #10
 8001f62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f66:	0290      	lsls	r0, r2, #10
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	f7fe f92c 	bl	80001d4 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	60bb      	str	r3, [r7, #8]
      break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fa2:	60bb      	str	r3, [r7, #8]
      break;
 8001fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	017d7840 	.word	0x017d7840

08001fbc <__libc_init_array>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	4d0d      	ldr	r5, [pc, #52]	; (8001ff4 <__libc_init_array+0x38>)
 8001fc0:	4c0d      	ldr	r4, [pc, #52]	; (8001ff8 <__libc_init_array+0x3c>)
 8001fc2:	1b64      	subs	r4, r4, r5
 8001fc4:	10a4      	asrs	r4, r4, #2
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	42a6      	cmp	r6, r4
 8001fca:	d109      	bne.n	8001fe0 <__libc_init_array+0x24>
 8001fcc:	4d0b      	ldr	r5, [pc, #44]	; (8001ffc <__libc_init_array+0x40>)
 8001fce:	4c0c      	ldr	r4, [pc, #48]	; (8002000 <__libc_init_array+0x44>)
 8001fd0:	f000 f820 	bl	8002014 <_init>
 8001fd4:	1b64      	subs	r4, r4, r5
 8001fd6:	10a4      	asrs	r4, r4, #2
 8001fd8:	2600      	movs	r6, #0
 8001fda:	42a6      	cmp	r6, r4
 8001fdc:	d105      	bne.n	8001fea <__libc_init_array+0x2e>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe4:	4798      	blx	r3
 8001fe6:	3601      	adds	r6, #1
 8001fe8:	e7ee      	b.n	8001fc8 <__libc_init_array+0xc>
 8001fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fee:	4798      	blx	r3
 8001ff0:	3601      	adds	r6, #1
 8001ff2:	e7f2      	b.n	8001fda <__libc_init_array+0x1e>
 8001ff4:	08002088 	.word	0x08002088
 8001ff8:	08002088 	.word	0x08002088
 8001ffc:	08002088 	.word	0x08002088
 8002000:	0800208c 	.word	0x0800208c

08002004 <memset>:
 8002004:	4402      	add	r2, r0
 8002006:	4603      	mov	r3, r0
 8002008:	4293      	cmp	r3, r2
 800200a:	d100      	bne.n	800200e <memset+0xa>
 800200c:	4770      	bx	lr
 800200e:	f803 1b01 	strb.w	r1, [r3], #1
 8002012:	e7f9      	b.n	8002008 <memset+0x4>

08002014 <_init>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	bf00      	nop
 8002018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201a:	bc08      	pop	{r3}
 800201c:	469e      	mov	lr, r3
 800201e:	4770      	bx	lr

08002020 <_fini>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr
